import org.springframework.boot.gradle.run.BootRunTask

buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
    }
    repositories {
        mavenCentral()
        // Gradle Cucumber Plugin can be downloaded
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:" +
                "${springBootVersion}")
        classpath("com.github.samueltbrown:gradle-cucumber-plugin:0.9")
        classpath("io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.github.samueltbrown.cucumber'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'


group = 'voyage-api-testing-cucumber'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

def configDir = "${project.rootDir}/config"
def reportsDir = "${project.buildDir}/reports"

// ****************************************************************************
// Project dependencies
// ****************************************************************************

dependencies {
    // Spring boot framework dependencies
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-actuator-docs')

    // cucumber API's for your step implementations
    compile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
    compile group: 'info.cukes', name: 'cucumber-jvm', version: '1.2.5', ext:
            'pom'
    compile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.5'
    compile group: 'info.cukes', name: 'cucumber-spring', version: '1.2.5'

    // Runtime dependencies
    runtime('org.springframework.boot:spring-boot-devtools')

    // Testing dependencies
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('info.cukes:cucumber-junit:1.2.5')
    testCompile('info.cukes:cucumber-jvm:1.2.5')
    testCompile('info.cukes:cucumber-java:1.2.5')
    testCompile('info.cukes:cucumber-spring:1.2.5')
}

// ****************************************************************************
// Cucumber configuration
// ****************************************************************************

cucumber {
    // generate cucumber reports
    formats = ['pretty', 'json:build/cucumber/cucumber.json',
               'junit:build/cucumber/cucumber.xml', 'html:build/cucumber/html']
    // can run all features/scenarios except for those annotated with @Ignore
    tags = ['~@Ignore']
}

// ****************************************************************************
// checkstyle, findbugs, pmd code quality task when running from Gradle
// ****************************************************************************

task checkstyle(type: Checkstyle) {
    configFile file("$configDir/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath =
            file("$configDir/checkstyle/suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

// enable findbugs to run in test environment
// task findbug(type: FindBugs) {
//     excludeFilter = new File("$configDir/findbugs/findbugs-exclude-filter.xml")
//     source 'src'
//     include '**/*.java'
//     exclude '**/gen/**'
//     xml {
//         destination "$reportsDir/findbugs/findbugs.xml"
//     }
//     html {
//         destination "$reportsDir/findbugs/findbugs.html"
//     }
//     reports {
//         xml.enabled false
//         html.enabled true
//         findbugsTest.enabled = true
//     }
//     classpath = files()
// }

findbugs {
    findbugsTest.enabled = true
}

// enable PDM to run in test environment
pmd {
    pmdTest.enabled = true
}

// ****************************************************************************
// Pass environment variables to Spring BootRun task when running from Gradle
// ****************************************************************************
tasks.withType(BootRunTask) {
    bootRun.systemProperties = System.properties as Map<String, ?>
}
